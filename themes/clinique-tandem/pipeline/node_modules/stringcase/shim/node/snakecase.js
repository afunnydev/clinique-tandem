/**
 * Convert string into snake case.
 * Join punctuation with underscore.
 * @memberof module:stringcase/lib
 * @function snakecase
 * @param {string} str - String to convert.
 * @returns {string} Snake cased string.
 */

'use strict';

var lowercase = require('./lowercase');
var uppercase = require('./uppercase');

var JOINER = '_';

var replacing = {
  from: /([A-Z]+)/g,
  to: function to(match, $1, offset) {
    var prefix = offset === 0 ? '' : JOINER;
    var len = $1.length;
    var replaced = len === 1 ? lowercase($1) : lowercase($1.substr(0, len - 1)) + JOINER + lowercase($1[len - 1]);
    return prefix + replaced;
  }
};

/** @lends snakecase */
function snakecase(str) {
  if (snakecase.isSnakecase(str)) {
    return str;
  }
  str = String(str).replace(/[\-\.\s]/g, JOINER);
  if (!str) {
    return str;
  }
  if (uppercase.isUppercase(str)) {
    str = lowercase(str);
  }
  return str.replace(replacing.from, replacing.to).replace(/_+/g, '_');
}

/**
 * Checks whether the string are snakecase.
 * @memberof module:stringcase/lib
 * @function snakecase.isSnakecase
 * @param {string} str - String to check.
 * @returns {boolean} - True if the string are snakecase.
 */
snakecase.isSnakecase = function (str) {
  return str && /^[a-z_]+$/.test(str);
};

module.exports = snakecase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNuYWtlY2FzZS5qcyJdLCJuYW1lcyI6WyJsb3dlcmNhc2UiLCJyZXF1aXJlIiwidXBwZXJjYXNlIiwiSk9JTkVSIiwicmVwbGFjaW5nIiwiZnJvbSIsInRvIiwibWF0Y2giLCIkMSIsIm9mZnNldCIsInByZWZpeCIsImxlbiIsImxlbmd0aCIsInJlcGxhY2VkIiwic3Vic3RyIiwic25ha2VjYXNlIiwic3RyIiwiaXNTbmFrZWNhc2UiLCJTdHJpbmciLCJyZXBsYWNlIiwiaXNVcHBlcmNhc2UiLCJ0ZXN0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQVNBOztBQUVBLElBQU1BLFlBQVlDLFFBQVEsYUFBUixDQUFsQjtBQUNBLElBQU1DLFlBQVlELFFBQVEsYUFBUixDQUFsQjs7QUFFQSxJQUFNRSxTQUFTLEdBQWY7O0FBRUEsSUFBTUMsWUFBWTtBQUNoQkMsUUFBTSxXQURVO0FBRWhCQyxJQUZnQixjQUVaQyxLQUZZLEVBRUxDLEVBRkssRUFFREMsTUFGQyxFQUVPO0FBQ3JCLFFBQUlDLFNBQVNELFdBQVcsQ0FBWCxHQUFlLEVBQWYsR0FBb0JOLE1BQWpDO0FBQ0EsUUFBSVEsTUFBTUgsR0FBR0ksTUFBYjtBQUNBLFFBQUlDLFdBQVdGLFFBQVEsQ0FBUixHQUFZWCxVQUFVUSxFQUFWLENBQVosR0FDYlIsVUFBVVEsR0FBR00sTUFBSCxDQUFVLENBQVYsRUFBYUgsTUFBTSxDQUFuQixDQUFWLElBQW1DUixNQUFuQyxHQUE0Q0gsVUFBVVEsR0FBSUcsTUFBTSxDQUFWLENBQVYsQ0FEOUM7QUFHQSxXQUFPRCxTQUFTRyxRQUFoQjtBQUNEO0FBVGUsQ0FBbEI7O0FBWUE7QUFDQSxTQUFTRSxTQUFULENBQW9CQyxHQUFwQixFQUF5QjtBQUN2QixNQUFJRCxVQUFVRSxXQUFWLENBQXNCRCxHQUF0QixDQUFKLEVBQWdDO0FBQzlCLFdBQU9BLEdBQVA7QUFDRDtBQUNEQSxRQUFNRSxPQUFPRixHQUFQLEVBQVlHLE9BQVosQ0FBb0IsV0FBcEIsRUFBaUNoQixNQUFqQyxDQUFOO0FBQ0EsTUFBSSxDQUFDYSxHQUFMLEVBQVU7QUFDUixXQUFPQSxHQUFQO0FBQ0Q7QUFDRCxNQUFJZCxVQUFVa0IsV0FBVixDQUFzQkosR0FBdEIsQ0FBSixFQUFnQztBQUM5QkEsVUFBTWhCLFVBQVVnQixHQUFWLENBQU47QUFDRDtBQUNELFNBQU9BLElBQUlHLE9BQUosQ0FBWWYsVUFBVUMsSUFBdEIsRUFBNEJELFVBQVVFLEVBQXRDLEVBQTBDYSxPQUExQyxDQUFrRCxLQUFsRCxFQUF5RCxHQUF6RCxDQUFQO0FBQ0Q7O0FBRUQ7Ozs7Ozs7QUFPQUosVUFBVUUsV0FBVixHQUF3QixVQUFVRCxHQUFWLEVBQWU7QUFDckMsU0FBT0EsT0FBTyxZQUFZSyxJQUFaLENBQWlCTCxHQUFqQixDQUFkO0FBQ0QsQ0FGRDs7QUFJQU0sT0FBT0MsT0FBUCxHQUFpQlIsU0FBakIiLCJmaWxlIjoic25ha2VjYXNlLmpzIiwic291cmNlUm9vdCI6ImxpYiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29udmVydCBzdHJpbmcgaW50byBzbmFrZSBjYXNlLlxuICogSm9pbiBwdW5jdHVhdGlvbiB3aXRoIHVuZGVyc2NvcmUuXG4gKiBAbWVtYmVyb2YgbW9kdWxlOnN0cmluZ2Nhc2UvbGliXG4gKiBAZnVuY3Rpb24gc25ha2VjYXNlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gU3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBTbmFrZSBjYXNlZCBzdHJpbmcuXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGxvd2VyY2FzZSA9IHJlcXVpcmUoJy4vbG93ZXJjYXNlJylcbmNvbnN0IHVwcGVyY2FzZSA9IHJlcXVpcmUoJy4vdXBwZXJjYXNlJylcblxuY29uc3QgSk9JTkVSID0gJ18nXG5cbmNvbnN0IHJlcGxhY2luZyA9IHtcbiAgZnJvbTogLyhbQS1aXSspL2csXG4gIHRvIChtYXRjaCwgJDEsIG9mZnNldCkge1xuICAgIGxldCBwcmVmaXggPSBvZmZzZXQgPT09IDAgPyAnJyA6IEpPSU5FUlxuICAgIGxldCBsZW4gPSAkMS5sZW5ndGhcbiAgICBsZXQgcmVwbGFjZWQgPSBsZW4gPT09IDEgPyBsb3dlcmNhc2UoJDEpIDogKFxuICAgICAgbG93ZXJjYXNlKCQxLnN1YnN0cigwLCBsZW4gLSAxKSkgKyBKT0lORVIgKyBsb3dlcmNhc2UoJDFbIGxlbiAtIDEgXSlcbiAgICApXG4gICAgcmV0dXJuIHByZWZpeCArIHJlcGxhY2VkXG4gIH1cbn1cblxuLyoqIEBsZW5kcyBzbmFrZWNhc2UgKi9cbmZ1bmN0aW9uIHNuYWtlY2FzZSAoc3RyKSB7XG4gIGlmIChzbmFrZWNhc2UuaXNTbmFrZWNhc2Uoc3RyKSkge1xuICAgIHJldHVybiBzdHJcbiAgfVxuICBzdHIgPSBTdHJpbmcoc3RyKS5yZXBsYWNlKC9bXFwtXFwuXFxzXS9nLCBKT0lORVIpXG4gIGlmICghc3RyKSB7XG4gICAgcmV0dXJuIHN0clxuICB9XG4gIGlmICh1cHBlcmNhc2UuaXNVcHBlcmNhc2Uoc3RyKSkge1xuICAgIHN0ciA9IGxvd2VyY2FzZShzdHIpXG4gIH1cbiAgcmV0dXJuIHN0ci5yZXBsYWNlKHJlcGxhY2luZy5mcm9tLCByZXBsYWNpbmcudG8pLnJlcGxhY2UoL18rL2csICdfJylcbn1cblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB0aGUgc3RyaW5nIGFyZSBzbmFrZWNhc2UuXG4gKiBAbWVtYmVyb2YgbW9kdWxlOnN0cmluZ2Nhc2UvbGliXG4gKiBAZnVuY3Rpb24gc25ha2VjYXNlLmlzU25ha2VjYXNlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gU3RyaW5nIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IC0gVHJ1ZSBpZiB0aGUgc3RyaW5nIGFyZSBzbmFrZWNhc2UuXG4gKi9cbnNuYWtlY2FzZS5pc1NuYWtlY2FzZSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ciAmJiAvXlthLXpfXSskLy50ZXN0KHN0cilcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzbmFrZWNhc2VcbiJdfQ==